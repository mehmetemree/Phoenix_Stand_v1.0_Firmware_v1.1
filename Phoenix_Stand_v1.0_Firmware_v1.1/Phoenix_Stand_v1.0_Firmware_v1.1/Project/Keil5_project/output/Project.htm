<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Feb 12 16:59:10 2024
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SensorEvents &rArr; Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4a]">CAN1_EWMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[48]">CAN1_RX0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[49]">CAN1_RX1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[47]">CAN1_TX_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA1_Channel0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[41]">DMA1_Channel1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[42]">DMA1_Channel2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[43]">DMA1_Channel3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[44]">DMA1_Channel4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[45]">ENET_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[46]">ENET_WKUP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[39]">EXMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[f]">RCU_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from phoenixconfig.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_gd32f10x.o(.text) referenced from startup_gd32f10x_cl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3a]">TIMER4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3e]">TIMER5_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3f]">TIMER6_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3c]">UART3_IRQHandler</a> from modbus.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4b]">USBFS_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f10x_cl.o(.text)
 <LI><a href="#[4f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4c]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[109]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[118]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[119]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[11c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[11d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; SensorEvents &rArr; Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_pins
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdFastClear
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[58]"></a>MB_ReadEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_ReadEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SendDataArray
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[5a]"></a>MB_WriteEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_WriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SendDataArray
</UL>

<P><STRONG><a name="[5c]"></a>MB_SendDataArray</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_SendDataArray &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WriteEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingRegister
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Exception
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Write
</UL>

<P><STRONG><a name="[60]"></a>MB_Write</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MB_Write &rArr; MB_SendDataArray &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SendDataArray
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
</UL>

<P><STRONG><a name="[63]"></a>MB_calculateCRC</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MB_calculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingRegister
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Exception
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_isReceivedFrameValid
</UL>

<P><STRONG><a name="[61]"></a>MB_Exception</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MB_Exception &rArr; MB_SendDataArray &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_GetComboxMBAddr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_calculateCRC
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SendDataArray
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingRegister
</UL>

<P><STRONG><a name="[64]"></a>MB_ReadHoldingRegister</STRONG> (Thumb, 2562 bytes, Stack size 24 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MB_ReadHoldingRegister &rArr; MB_Exception &rArr; MB_SendDataArray &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorFaultStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorTemperature
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Exception
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_calculateCRC
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SendDataArray
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
</UL>

<P><STRONG><a name="[67]"></a>MB_Job</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MB_Job &rArr; MB_ReadHoldingRegister &rArr; MB_Exception &rArr; MB_SendDataArray &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRelay2
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRelay1
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_GetComboxMBAddr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingRegister
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
</UL>

<P><STRONG><a name="[6b]"></a>MB_Process</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MB_Process &rArr; MB_Job &rArr; MB_ReadHoldingRegister &rArr; MB_Exception &rArr; MB_SendDataArray &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_queue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_peek
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_num_items
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_dequeue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_GetComboxMBAddr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_isReceivedFrameValid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[3c]"></a>UART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART3_IRQHandler &rArr; MB_Process &rArr; MB_Job &rArr; MB_ReadHoldingRegister &rArr; MB_Exception &rArr; MB_SendDataArray &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>MB_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MB_Init &rArr; USART_Configuration &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>Pho_ReadCurrentValueSwitches</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, phoenix.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[52]"></a>Pho_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phoenix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Pho_init &rArr; DMA_Config &rArr; dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4Configuration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Configuration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_GPIOConfiguration
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_ReadCurrentValueSwitches
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>Pho_run</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phoenix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pho_run
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
</UL>

<P><STRONG><a name="[62]"></a>Pho_GetComboxMBAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, phoenix.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Exception
</UL>

<P><STRONG><a name="[11e]"></a>Pho_SetComboxMBAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, phoenix.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>SetRelay1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, phoenix.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
</UL>

<P><STRONG><a name="[11f]"></a>GetRelay1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, phoenix.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>SetRelay2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, phoenix.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
</UL>

<P><STRONG><a name="[120]"></a>GetRelay2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, phoenix.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>DelayUs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, phoenix.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ShowChar
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SendDataArray
</UL>

<P><STRONG><a name="[82]"></a>LCD_MSleep</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, phoenix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ClearLCD
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteNibble
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[81]"></a>get_adc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, phoenixconfig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_run
</UL>

<P><STRONG><a name="[77]"></a>Pho_RCC_Configuration</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pho_RCC_Configuration &rArr; rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_pll_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_bypass_mode_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb2_clock_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb1_clock_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ahb_clock_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[72]"></a>USART_Configuration</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USART_Configuration &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[79]"></a>TIM3Configuration</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_source_config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[7a]"></a>TIM4Configuration</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_source_config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[78]"></a>Pho_GPIOConfiguration</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Pho_GPIOConfiguration &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[7e]"></a>ADC_Config</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Config &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[7d]"></a>DMA_Config</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA_Config &rArr; dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[7b]"></a>NVIC_Configuration</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[7c]"></a>rtc_configuration</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rtc_configuration &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_init
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, phoenixconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_IRQHandler &rArr; Lcd &rArr; lcd_ShowChar &rArr; lcd_SetLCDPosition &rArr; lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>ring_buffer_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[bc]"></a>ring_buffer_is_full</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_queue
</UL>

<P><STRONG><a name="[6d]"></a>ring_buffer_queue</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_queue_arr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
</UL>

<P><STRONG><a name="[bd]"></a>ring_buffer_queue_arr</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_queue
</UL>

<P><STRONG><a name="[be]"></a>ring_buffer_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_dequeue_arr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_dequeue
</UL>

<P><STRONG><a name="[70]"></a>ring_buffer_dequeue</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_buffer_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_dequeue_arr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
</UL>

<P><STRONG><a name="[bf]"></a>ring_buffer_dequeue_arr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_is_empty
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_dequeue
</UL>

<P><STRONG><a name="[6e]"></a>ring_buffer_num_items</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_peek
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
</UL>

<P><STRONG><a name="[6f]"></a>ring_buffer_peek</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ring_buffer_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_num_items
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
</UL>

<P><STRONG><a name="[c0]"></a>Temperature</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, volt2temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_run
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
</UL>

<P><STRONG><a name="[57]"></a>SensorEvents</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, volt2temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SensorEvents &rArr; Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSensorOK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>SensorFaultStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, volt2temp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingRegister
</UL>

<P><STRONG><a name="[65]"></a>GetSensorTemperature</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, volt2temp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingRegister
</UL>

<P><STRONG><a name="[ca]"></a>lcd_WriteNibble</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MSleep
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteByte
</UL>

<P><STRONG><a name="[cb]"></a>lcd_WriteByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteNibble
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ClearLCD
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_GoToLine
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ShowChar
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetLCDPosition
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[cc]"></a>lcd_SetLCDPosition</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_SetLCDPosition &rArr; lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ShowChar
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdFastClear
</UL>

<P><STRONG><a name="[cd]"></a>lcd_ShowChar</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_ShowChar &rArr; lcd_SetLCDPosition &rArr; lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetLCDPosition
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ShowStr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd
</UL>

<P><STRONG><a name="[bb]"></a>Lcd</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Lcd &rArr; lcd_ShowChar &rArr; lcd_SetLCDPosition &rArr; lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ShowChar
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetLCDPosition
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorTemperature
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>lcd_init_pins</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_init_pins &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>command</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = command &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteNibble
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[d0]"></a>lcd_GoToLine</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_GoToLine &rArr; lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ClearLCD
</UL>

<P><STRONG><a name="[d1]"></a>lcd_ClearLCD</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_ClearLCD &rArr; lcd_GoToLine &rArr; lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_GoToLine
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MSleep
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[d2]"></a>lcd_ShowStr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ShowChar
</UL>

<P><STRONG><a name="[56]"></a>lcdFastClear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcdFastClear &rArr; lcd_SetLCDPosition &rArr; lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetLCDPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>lcd_init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_init &rArr; lcd_ClearLCD &rArr; lcd_GoToLine &rArr; lcd_WriteByte &rArr; lcd_WriteNibble &rArr; LCD_MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ClearLCD
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MSleep
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, system_gd32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>adc_deinit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>

<P><STRONG><a name="[a2]"></a>adc_mode_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[a3]"></a>adc_special_function_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[a4]"></a>adc_data_alignment_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[a9]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[121]"></a>adc_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>adc_calibration_enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[122]"></a>adc_tempsensor_vrefint_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>adc_tempsensor_vrefint_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[124]"></a>adc_dma_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>adc_discontinuous_mode_config</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>adc_channel_length_config</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[a6]"></a>adc_regular_channel_config</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[126]"></a>adc_inserted_channel_config</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>adc_inserted_channel_offset_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[a8]"></a>adc_external_trigger_config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[ac]"></a>adc_software_trigger_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[128]"></a>adc_regular_data_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>adc_inserted_data_read</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>adc_sync_mode_convert_value_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>adc_watchdog_single_channel_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>adc_watchdog_group_channel_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>adc_watchdog_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>adc_watchdog_threshold_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>adc_flag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>adc_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>adc_regular_software_startconv_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>adc_inserted_software_startconv_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>adc_interrupt_flag_get</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>adc_interrupt_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>adc_interrupt_enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>adc_interrupt_disable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>bkp_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkp_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[137]"></a>bkp_data_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>bkp_data_read</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>bkp_rtc_calibration_output_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>bkp_rtc_calibration_output_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>bkp_rtc_signal_output_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>bkp_rtc_signal_output_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>bkp_rtc_output_select</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>bkp_rtc_calibration_value_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>bkp_tamper_detection_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>bkp_tamper_detection_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>bkp_tamper_active_level_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>bkp_interrupt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>bkp_interrupt_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>bkp_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>bkp_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>bkp_interrupt_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>bkp_interrupt_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>dma_deinit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
</UL>

<P><STRONG><a name="[148]"></a>dma_struct_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>dma_init</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, gd32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
</UL>

<P><STRONG><a name="[af]"></a>dma_circulation_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
</UL>

<P><STRONG><a name="[db]"></a>dma_circulation_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[dc]"></a>dma_memory_to_memory_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[dd]"></a>dma_memory_to_memory_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[b0]"></a>dma_channel_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
</UL>

<P><STRONG><a name="[de]"></a>dma_channel_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[df]"></a>dma_periph_address_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e0]"></a>dma_memory_address_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e1]"></a>dma_transfer_number_config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e2]"></a>dma_transfer_number_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e3]"></a>dma_priority_config</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e4]"></a>dma_memory_width_config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e5]"></a>dma_periph_width_config</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e6]"></a>dma_memory_increase_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e7]"></a>dma_memory_increase_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e8]"></a>dma_periph_increase_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[e9]"></a>dma_periph_increase_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[ea]"></a>dma_transfer_direction_config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[149]"></a>dma_flag_get</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gd32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>dma_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>dma_interrupt_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[ec]"></a>dma_interrupt_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>

<P><STRONG><a name="[14d]"></a>fwdgt_write_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_fwdgt.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>fwdgt_write_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_fwdgt.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>fwdgt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_fwdgt.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>fwdgt_prescaler_value_config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gd32f10x_fwdgt.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>fwdgt_reload_value_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gd32f10x_fwdgt.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>fwdgt_counter_reload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_fwdgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MSleep
</UL>

<P><STRONG><a name="[152]"></a>fwdgt_config</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, gd32f10x_fwdgt.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>fwdgt_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_fwdgt.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>gpio_deinit</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, gd32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>

<P><STRONG><a name="[ee]"></a>gpio_afio_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>

<P><STRONG><a name="[a1]"></a>gpio_init</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_GPIOConfiguration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_pins
</UL>

<P><STRONG><a name="[5b]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ClearLCD
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_GoToLine
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ShowChar
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetLCDPosition
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteNibble
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WriteEnable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
</UL>

<P><STRONG><a name="[59]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ClearLCD
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_GoToLine
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetLCDPosition
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_WriteNibble
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Job
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadEnable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[154]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>gpio_port_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
</UL>

<P><STRONG><a name="[156]"></a>gpio_input_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>gpio_output_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>gpio_output_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>gpio_pin_remap_config</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_GPIOConfiguration
</UL>

<P><STRONG><a name="[159]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>gpio_event_output_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>gpio_event_output_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>gpio_event_output_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>gpio_pin_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>gpio_ethernet_phy_select</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[75]"></a>nvic_irq_enable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32f10x_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[15f]"></a>nvic_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_misc.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>nvic_vector_table_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[160]"></a>system_lowpower_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_misc.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>system_lowpower_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_misc.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>systick_clksource_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f10x_misc.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>pmu_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f10x_pmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>

<P><STRONG><a name="[163]"></a>pmu_lvd_select</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>pmu_lvd_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>pmu_to_sleepmode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>pmu_to_deepsleepmode</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>pmu_to_standbymode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>pmu_wakeup_pin_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>pmu_wakeup_pin_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>pmu_backup_write_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[16a]"></a>pmu_backup_write_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>pmu_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>pmu_flag_clear</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>rcu_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[b3]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[84]"></a>rcu_deinit</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[8f]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_pins
</UL>

<P><STRONG><a name="[16d]"></a>rcu_periph_clock_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>rcu_periph_clock_sleep_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>rcu_periph_clock_sleep_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_deinit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_afio_deinit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_deinit
</UL>

<P><STRONG><a name="[d7]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_deinit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_afio_deinit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_deinit
</UL>

<P><STRONG><a name="[d8]"></a>rcu_bkp_reset_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[d9]"></a>rcu_bkp_reset_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[8c]"></a>rcu_system_clock_source_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[8d]"></a>rcu_system_clock_source_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[88]"></a>rcu_ahb_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[8a]"></a>rcu_apb1_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[89]"></a>rcu_apb2_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[170]"></a>rcu_ckout0_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>rcu_pll_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[171]"></a>rcu_predv0_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>rcu_predv1_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>rcu_pll1_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>rcu_pll2_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>rcu_adc_clock_config</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[175]"></a>rcu_usb_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[176]"></a>rcu_i2s1_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>rcu_i2s2_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>rcu_interrupt_flag_get</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>rcu_interrupt_flag_clear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>rcu_interrupt_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>rcu_interrupt_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>rcu_osci_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[17d]"></a>rcu_osci_off</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>rcu_osci_bypass_mode_enable</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pho_RCC_Configuration
</UL>

<P><STRONG><a name="[17e]"></a>rcu_osci_bypass_mode_disable</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>rcu_hxtal_clock_monitor_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>rcu_hxtal_clock_monitor_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>rcu_irc8m_adjust_value_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>rcu_deepsleep_voltage_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>rcu_clock_freq_get</STRONG> (Thumb, 334 bytes, Stack size 92 bytes, gd32f10x_rcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[f1]"></a>rtc_configuration_mode_enter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>

<P><STRONG><a name="[f2]"></a>rtc_configuration_mode_exit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>

<P><STRONG><a name="[f0]"></a>rtc_counter_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>

<P><STRONG><a name="[b8]"></a>rtc_prescaler_set</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gd32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[b6]"></a>rtc_lwoff_wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[b5]"></a>rtc_register_sync_wait</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[f3]"></a>rtc_alarm_config</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>

<P><STRONG><a name="[183]"></a>rtc_counter_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>rtc_divider_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>rtc_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>rtc_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>rtc_interrupt_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>rtc_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>rtc_interrupt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[187]"></a>rtc_interrupt_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>timer_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>

<P><STRONG><a name="[188]"></a>timer_struct_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>timer_init</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4Configuration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Configuration
</UL>

<P><STRONG><a name="[9f]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4Configuration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Configuration
</UL>

<P><STRONG><a name="[189]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4Configuration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Configuration
</UL>

<P><STRONG><a name="[18a]"></a>timer_auto_reload_shadow_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>timer_update_event_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>timer_update_event_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>timer_counter_alignment</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>timer_counter_up_direction</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>timer_counter_down_direction</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>timer_prescaler_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>timer_repetition_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>timer_autoreload_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>timer_counter_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>timer_counter_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>timer_prescaler_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>timer_single_pulse_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>timer_update_source_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4Configuration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Configuration
</UL>

<P><STRONG><a name="[197]"></a>timer_dma_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>timer_dma_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>timer_channel_dma_request_source_select</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>timer_dma_transfer_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>timer_event_software_generate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>timer_break_struct_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>timer_break_config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>timer_break_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>timer_break_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>timer_automatic_output_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>timer_automatic_output_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>timer_channel_control_shadow_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>timer_channel_control_shadow_update_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>timer_channel_output_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>timer_channel_output_config</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>timer_channel_output_fast_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>timer_channel_output_clear_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>timer_channel_output_polarity_config</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>timer_channel_complementary_output_polarity_config</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>timer_channel_output_state_config</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>timer_channel_complementary_output_state_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>timer_channel_input_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>timer_channel_input_capture_prescaler_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_pwm_capture_config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
</UL>

<P><STRONG><a name="[f5]"></a>timer_input_capture_config</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_capture_prescaler_config
</UL>

<P><STRONG><a name="[1b1]"></a>timer_channel_capture_value_register_read</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>timer_input_pwm_capture_config</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_capture_prescaler_config
</UL>

<P><STRONG><a name="[1b2]"></a>timer_hall_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>timer_input_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_trigger_as_external_clock_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_internal_trigger_as_external_clock_config
</UL>

<P><STRONG><a name="[1b3]"></a>timer_master_output_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>timer_slave_mode_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>timer_master_slave_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>timer_external_trigger_config</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_clock_mode1_config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_clock_mode0_config
</UL>

<P><STRONG><a name="[1b6]"></a>timer_quadrature_decoder_mode_config</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>timer_internal_clock_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>timer_internal_trigger_as_external_clock_config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
</UL>

<P><STRONG><a name="[fa]"></a>timer_external_trigger_as_external_clock_config</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
</UL>

<P><STRONG><a name="[fb]"></a>timer_external_clock_mode0_config</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_trigger_config
</UL>

<P><STRONG><a name="[fd]"></a>timer_external_clock_mode1_config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, gd32f10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_trigger_config
</UL>

<P><STRONG><a name="[1b8]"></a>timer_external_clock_mode1_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4Configuration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Configuration
</UL>

<P><STRONG><a name="[1b9]"></a>timer_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>timer_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>timer_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[90]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[93]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[91]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[92]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[98]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[1be]"></a>usart_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[96]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[5f]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SendDataArray
</UL>

<P><STRONG><a name="[6c]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
</UL>

<P><STRONG><a name="[1bf]"></a>usart_address_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>usart_mute_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>usart_mute_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>usart_mute_mode_wakeup_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>usart_lin_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>usart_lin_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>usart_lin_break_detection_length_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>usart_send_break</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>usart_halfduplex_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>usart_halfduplex_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>usart_synchronous_clock_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>usart_synchronous_clock_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>usart_synchronous_clock_config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>usart_guard_time_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>usart_smartcard_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>usart_smartcard_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>usart_smartcard_mode_nack_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>usart_smartcard_mode_nack_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>usart_irda_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>usart_irda_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>usart_prescaler_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>usart_irda_lowpower_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[95]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[1d5]"></a>usart_dma_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>usart_dma_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_SendDataArray
</UL>

<P><STRONG><a name="[71]"></a>usart_flag_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[1d7]"></a>usart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSensorOK
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSensorOK
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1db]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1dc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1dd]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[103]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[10f]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1df]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e1]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ce]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd
</UL>

<P><STRONG><a name="[1e2]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1e3]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[10c]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[10d]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[10e]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[110]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1e4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[115]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[c4]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6a]"></a>MB_isReceivedFrameValid</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MB_isReceivedFrameValid &rArr; MB_calculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_calculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Process
</UL>

<P><STRONG><a name="[c6]"></a>IsSensorOK</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, volt2temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsSensorOK
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEvents
</UL>

<P><STRONG><a name="[d4]"></a>system_clock_48m_irc8m</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, system_gd32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d3]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_48m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[da]"></a>dma_periph_and_channel_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_direction_config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_increase_disable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_increase_enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_increase_disable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_increase_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_width_config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_width_config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_priority_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_address_config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
</UL>

<P><STRONG><a name="[111]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10b]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[113]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[112]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
